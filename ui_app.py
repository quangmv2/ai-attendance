# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/app.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
from threading import Thread
from detect import detectFace
import time
from db import DataBase
from MulitiThread import *

from train import *
from user import User
from PyQt5.QtCore import *

cap = cv2.VideoCapture(0)


class Ui_App(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1359, 821)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.video = QtWidgets.QLabel(self.centralwidget)
        self.video.setGeometry(QtCore.QRect(550, 20, 960, 540))
        self.video.setObjectName("video")
        self.pixmap = QtGui.QPixmap('image.jpg')
        self.video.setPixmap(self.pixmap)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(1000, 600, 171, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setText("Quang")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(1210, 600, 93, 31))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setObjectName("pushButton")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(1010, 650, 281, 21))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.tableView = QtWidgets.QTableView(self.centralwidget)
        self.tableView.setGeometry(QtCore.QRect(20, 20, 491, 741))
        self.tableView.setObjectName("tableView")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(550, 600, 121, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1359, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.cam = False
        self.users = {}
        self.thread1 = AtenndanceThread("Thres", 0, self.pixmap, self.video, {}, self.atenndance)
        self.threadTrain = TrainThead(User(-1, ""), self.video, stop=True, updateProgress=self.upProgress,
                                      _callback=self.updateList)
        self.db = DataBase()

        self.header = ["ID", "Name", "Attendance"]
        users = self.db.getAllUser()
        self.users = self.listToSet(users)
        modal = TableModel(users, self.header, patent=self)
        self.tableView.setModel(modal)

    def listToSet(self, users):
        set = {}
        for user in users:
            set[user.id] = user
        return set

    def setToList(self, sets):
        list = []
        for user in sets:
            list.append(sets[user])
        return list

    def atenndance(self, id):
        user = self.users.get(id)
        if user is None: return
        user.status = 1
        self.users[id] = user
        self.updateTable(self.setToList(self.users))

    def updateTable(self, users):
        modal = TableModel(users, self.header, patent=self)
        self.tableView.setModel(modal)

    def updateList(self):
        users = self.db.getAllUser()
        self.users = self.listToSet(users)
        self.updateTable(users)

    def startCamera(self):
        try:
            self.thread1 = AtenndanceThread("Thres", 0, self.pixmap, self.video, self.users, _callback=self.atenndance)
            self.thread1.start();
        except:
            print("error")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Train"))
        self.pushButton.setText(_translate("MainWindow", "Train"))
        self.pushButton_2.setText(_translate("MainWindow", "Điểm danh"))
        self.pushButton.clicked.connect(self.clickTrain)
        self.pushButton_2.clicked.connect(self.clickAttendance)

    def clickAttendance(self):
        if (self.thread1.cam is True):
            self.cam = False
            self.thread1.cam = False
            self.pushButton_2.setText("Attendance")
            return
        else:
            self.pushButton_2.setText("Stop")
        self.updateList()
        self.startCamera()

    def upProgress(self, progress):
        self.progressBar.setProperty("value", progress)

    def clickTrain(self):
        name = self.lineEdit.text()
        user = self.db.createUser(name)
        if self.threadTrain.stop is False:
            self.threadTrain.stop = True
        self.upProgress(0)
        self.threadTrain = TrainThead(user, self.video, stop=False, updateProgress=self.upProgress,
                                      _callback=self.updateList)
        self.threadTrain.start()
        # self.closeCamera()

    def openCamera(self):
        cap = cv2.VideoCapture(0)
        self.cam = True
        i = 1
        while self.cam:
            ret, frame = cap.read()
            frame_video, crop = detectFace(frame)
            self.pixmap.fromImage(frame_video)
        cap.release()
        cv2.destroyAllWindows()

    def closeCamera(self):
        self.cam = False


class TableModel(QAbstractTableModel):

    def __init__(self, rows, headers, patent=None):
        super(TableModel, self).__init__(None)
        self.rows = self.convertToData(rows)
        self.headers = headers

    def convertToData(self, users):
        rows = [[user.id, user.fullname, "Có" if user.status != 0 else "Vắng"] for user in users]
        return rows

    def rowCount(self, parent):
        # How many rows are there?
        return len(self.rows)

    def columnCount(self, parent):
        # How many columns?
        return len(self.headers)

    def data(self, index, role):
        if role != Qt.DisplayRole:
            return QVariant()
        # What's the value of the cell at the given index?
        return self.rows[index.row()][index.column()]

    def headerData(self, section, orientation, role):
        if role != Qt.DisplayRole or orientation != Qt.Horizontal:
            return QVariant()
        # What's the header for the given column?
        return self.headers[section]
